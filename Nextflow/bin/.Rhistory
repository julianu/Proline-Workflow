View(peptides)
boxplot(peptides[,150])
boxplot(peptides[,183])
boxplot(2^peptides[,183])
boxplot(peptides[,183])
boxplot(peptides[,183:190])
boxplot(log2(peptides[,150:160])
boxplot(log2(peptides[,150:155])
)
peptides <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_pep_res.csv")
proteins <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_prot_res.csv")
colnames(peptides) <- sub("^psm_count_", "number_of_psms_", colnames(peptides))
colnames(peptides) <- sub("^log.ratios_", "log_ratios_", colnames(peptides))
colnames(peptides) <- sub("^raw_abundance_", "abundance_", colnames(peptides))
colnames(peptides) <- sub("^FDR.PolySTest.X_", "differentially_regulated_", colnames(peptides))
colnames(peptides)
stand_peps <- data.frame("modified_peptide"=peptides$sequence, protein_group=peptides$samesets_accessions,
peptides[, grep("^number_of_psms", colnames(peptides))],
peptides[, grep("^abundance", colnames(peptides))],
peptides[, grep("^log_ratios", colnames(peptides))],
peptides[, grep("^differentially_regulated", colnames(peptides))])
head(stand_peps)
colnames(peptides)
peptides <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_pep_res.csv")
proteins <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_prot_res.csv")
colnames(peptides) <- sub("^psm_count_", "number_of_psms_", colnames(peptides))
colnames(peptides) <- sub("^log.ratios.", "log_ratios_", colnames(peptides))
colnames(peptides) <- sub("^raw_abundance_", "abundance_", colnames(peptides))
colnames(peptides) <- sub("^FDR.PolySTest.X.", "differentially_regulated_", colnames(peptides))
colnames(peptides)
stand_peps <- data.frame("modified_peptide"=peptides$sequence, protein_group=peptides$samesets_accessions,
peptides[, grep("^number_of_psms", colnames(peptides))],
peptides[, grep("^abundance", colnames(peptides))],
peptides[, grep("^log_ratios", colnames(peptides))],
peptides[, grep("^differentially_regulated", colnames(peptides))])
head(stand_peps)
colnames(peptides)
View(peptides)
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides
modified_peptides <- lapply(modified_peptides, function(x) matrix(unlist(strsplit(x, " ")), ncol=2))
modified_peptides
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) ifelse(!is.na(x), matrix(unlist(strsplit(x, " ")), ncol=2) , NA))
warnings()
modified_peptides
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(!is.na(x)) {
matrix(unlist(strsplit(x, " ")), ncol=2)
} else {
NA
}
})
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
matrix(unlist(strsplit(x, " ")), ncol=2)
} else {
NA
}
})
warnings()
modified_peptides
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " (")), ncol=2)
tt[2,] <- sub(")","",tt[2,])
} else {
NA
}
})
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " (")), ncol=2)
tt[2,] <- sub(")","",tt[2,])
tt
} else {
NA
}
})
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " (")), ncol=2)
tt[2,] <- sub("\\)","",tt[2,])
tt
} else {
NA
}
})
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), ncol=2)
tt[2,] <- sub("\\)","",tt[2,])
tt
} else {
NA
}
})
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), ncol=2)
#    tt[2,] <- sub("\\)","",tt[2,])
tt
} else {
NA
}
})
modified_peptides
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), by.row=T, ncol=2)
#    tt[2,] <- sub("\\)","",tt[2,])
tt
} else {
NA
}
})
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
#    tt[2,] <- sub("\\)","",tt[2,])
tt
} else {
NA
}
})
modified_peptides
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
tt
} else {
NA
}
})
modified_peptides
?substr
substr("dgsdfg", 1,1)
substr("dgsdfg", 1,2)
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
modpos <- NULL
for (i in 1:ncol(tt)) {
modpos <- ifelse(grepl("N-term|C-term", tt[2,i]), 0, substr(tt[2,i], 1,1))
}
tt <- rbind(tt, modpos)
} else {
NA
}
})
modified_peptides
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
modpos <- NULL
for (i in 1:ncol(tt)) {
modpos <- ifelse(grepl("N-term|C-term", tt[2,i]), 0, substr(tt[2,i], 2))
}
tt <- rbind(tt, modpos)
} else {
NA
}
})
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
modpos <- NULL
for (i in 1:ncol(tt)) {
modpos <- ifelse(grepl("N-term|C-term", tt[2,i]), 0, as.numeric(sub("[A-Z]",tt[2,i])))
}
tt <- rbind(tt, modpos)
} else {
NA
}
})
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
modpos <- NULL
for (i in 1:ncol(tt)) {
modpos <- ifelse(grepl("N-term|C-term", tt[2,i]), 0, as.numeric(sub("[A-Z]","",tt[2,i])))
}
tt <- rbind(tt, modpos)
} else {
NA
}
})
modified_peptides
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
modpos <- NULL
for (i in 1:ncol(tt)) {
modpos <- append(modpos, ifelse(grepl("N-term|C-term", tt[2,i]), 0, sub("[A-Z]","",tt[2,i])))
}
tt <- rbind(tt, modpos)
} else {
NA
}
})
modified_peptides
peptides$modified_sequence <- NA
modified_sequence <- vector(,nrow(peptides))
modified_sequence <- NA
modified_sequence
library(matrixStats)
library(stringi)
?stri_replace_all()
modified_sequence <- peptides$sequence
for (i in 1:nrow(peptides)) {
if (!is.na(modified_peptides[[i]])) {
stri_sub_replace_all(modified_sequence[i], replacement = modified_peptides[[i]][1,], from=as.numeric(modified_peptides[[i]][3,])+1,
to=as.numeric(modified_peptides[[i]][3,]))
}
}
modified_sequence <- peptides$sequence
for (i in 1:nrow(peptides)) {
if (!is.na(modified_peptides[[i]][1])) {
stri_sub_replace_all(modified_sequence[i], replacement = modified_peptides[[i]][1,], from=as.numeric(modified_peptides[[i]][3,])+1,
to=as.numeric(modified_peptides[[i]][3,]))
}
}
modified_sequence
modified_sequence <- peptides$sequence
for (i in 1:nrow(peptides)) {
if (!is.na(modified_peptides[[i]][1])) {
modified_sequence[i] <- stri_sub_replace_all(modified_sequence[i], replacement = paste0("[",modified_peptides[[i]][1,],"]"),
from=as.numeric(modified_peptides[[i]][3,])+1,
to=as.numeric(modified_peptides[[i]][3,]))
}
}
modified_sequence
cbind(modified_sequence, peptide$sequence)
cbind(modified_sequence, peptides$sequence)
View(cbind(modified_sequence, peptides$sequence))
library(matrixStats)
library(stringi)
#Reading files
peptides <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_pep_res.csv")
proteins <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_prot_res.csv")
# Converting column names
colnames(peptides) <- sub("^psm_count_", "number_of_psms_", colnames(peptides))
colnames(peptides) <- sub("^log.ratios.", "log_ratios_", colnames(peptides))
colnames(peptides) <- sub("^raw_abundance_", "abundance_", colnames(peptides))
colnames(peptides) <- sub("^FDR.PolySTest.X.", "differentially_regulated_", colnames(peptides))
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
modpos <- NULL
for (i in 1:ncol(tt)) {
modpos <- append(modpos, ifelse(grepl("N-term|C-term", tt[2,i]), 0, sub("[A-Z]","",tt[2,i])))
}
tt <- rbind(tt, modpos)
} else {
NA
}
})
modified_sequence <- peptides$sequence
for (i in 1:nrow(peptides)) {
if (!is.na(modified_peptides[[i]][1])) {
modified_sequence[i] <- stri_sub_replace_all(modified_sequence[i], replacement = paste0("[",modified_peptides[[i]][1,],"]"),
from=as.numeric(modified_peptides[[i]][3,])+1,
to=as.numeric(modified_peptides[[i]][3,]))
}
}
peptides$modified_sequence <- modified_sequence
colnames(peptides)
stand_peps <- data.frame("modified_peptide"=peptides$modified_sequence, protein_group=peptides$samesets_accessions,
peptides[, grep("^number_of_psms", colnames(peptides))],
peptides[, grep("^abundance", colnames(peptides))],
peptides[, grep("^log_ratios", colnames(peptides))],
peptides[, grep("^differentially_regulated", colnames(peptides))])
# deleting charge states with lower intensities to maintain max. 1 (modified) peptide sequence
stand_peps <- stand_peps[order(rowMeans(peptides[, grep("^abundance", colnames(peptides))], na.rm = T), decreasing=T),]
stand_peps <- stand_peps[!duplicated(stand_peps$modified_peptide), ]
stand_peps <- stand_peps[order(stand_peps$protein_group), ]
write.csv("stand_peps", "stand_pep_quant_merged.csv")
colnames(proteins)
colnames(proteins)
boxplot(proteins[,93])
boxplot(proteins[,120])
exp_design <- read.csv("../../Results/20220225-dev-JU_DE/params/quant_exp_design.txt")
exp_design
exp_design <- read.csv("../../Results/20220225-dev-JU_DE/params/quant_exp_design.txt", sep="\t")
exp_design
colnames(exp_design)[1:2] <- c("raw_file", "exp_condition")
library(matrixStats)
library(stringi)
#Reading files
peptides <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_pep_res.csv")
proteins <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_prot_res.csv")
exp_design <- read.csv("../../Results/20220225-dev-JU_DE/params/quant_exp_design.txt", sep="\t")
colnames(exp_design)[1:2] <- c("raw_file", "exp_condition")
write.csv(exp_design, "exp_design.csv")
for (s in unique(exp_design$exp_condition)) colnames(proteins) <- sub(paste0("^X",s,"\\."), paste0("abundance_",s,"_"), colnames(proteins))
colnames(proteins)
library(matrixStats)
library(stringi)
#Reading files
peptides <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_pep_res.csv")
proteins <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_prot_res.csv")
exp_design <- read.csv("../../Results/20220225-dev-JU_DE/params/quant_exp_design.txt", sep="\t")
colnames(exp_design)[1:2] <- c("raw_file", "exp_condition")
write.csv(exp_design, "exp_design.csv")
# Converting column names
colnames(peptides) <- sub("^psm_count_", "number_of_psms_", colnames(peptides))
colnames(peptides) <- sub("^log.ratios.", "log_ratios_", colnames(peptides))
for (s in unique(exp_design$exp_condition)) colnames(peptides) <- sub(paste0("^X",s,"\\."), paste0("abundance_",s,"_"), colnames(peptides))
colnames(peptides) <- sub("^raw_abundance_", "abundance_", colnames(peptides))
colnames(peptides) <- sub("^FDR.PolySTest.X.", "differentially_regulated_", colnames(peptides))
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
modpos <- NULL
for (i in 1:ncol(tt)) {
modpos <- append(modpos, ifelse(grepl("N-term|C-term", tt[2,i]), 0, sub("[A-Z]","",tt[2,i])))
}
tt <- rbind(tt, modpos)
} else {
NA
}
})
modified_sequence <- peptides$sequence
for (i in 1:nrow(peptides)) {
if (!is.na(modified_peptides[[i]][1])) {
modified_sequence[i] <- stri_sub_replace_all(modified_sequence[i], replacement = paste0("[",modified_peptides[[i]][1,],"]"),
from=as.numeric(modified_peptides[[i]][3,])+1,
to=as.numeric(modified_peptides[[i]][3,]))
}
}
peptides$modified_sequence <- modified_sequence
stand_peps <- data.frame("modified_peptide"=peptides$modified_sequence, protein_group=peptides$samesets_accessions,
peptides[, grep("^number_of_psms", colnames(peptides))],
2^peptides[, grep("^abundance", colnames(peptides))],
peptides[, grep("^log_ratios", colnames(peptides))],
peptides[, grep("^differentially_regulated", colnames(peptides))])
# deleting charge states with lower intensities to maintain max. 1 (modified) peptide sequence
stand_peps <- stand_peps[order(rowMeans(peptides[, grep("^abundance", colnames(peptides))], na.rm = T), decreasing=T),]
stand_peps <- stand_peps[!duplicated(stand_peps$modified_peptide), ]
stand_peps <- stand_peps[order(stand_peps$protein_group), ]
write.csv("stand_peps", "stand_pep_quant_merged.csv")
write.csv(stand_peps, "stand_pep_quant_merged.csv")
library(matrixStats)
library(stringi)
#Reading files
peptides <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_pep_res.csv")
proteins <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_prot_res.csv")
exp_design <- read.csv("../../Results/20220225-dev-JU_DE/params/quant_exp_design.txt", sep="\t")
colnames(exp_design)[1:2] <- c("raw_file", "exp_condition")
write.csv(exp_design, "exp_design.csv")
# Converting column names
colnames(peptides) <- sub("^psm_count_", "number_of_psms_", colnames(peptides))
colnames(peptides) <- sub("^log.ratios.", "log_ratios_", colnames(peptides))
for (s in unique(exp_design$exp_condition)) colnames(peptides) <- sub(paste0("^X",s,"\\."), paste0("abundance_",s,"_"), colnames(peptides))
colnames(peptides) <- sub("^FDR.PolySTest.X.", "differentially_regulated_", colnames(peptides))
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
modpos <- NULL
for (i in 1:ncol(tt)) {
modpos <- append(modpos, ifelse(grepl("N-term|C-term", tt[2,i]), 0, sub("[A-Z]","",tt[2,i])))
}
tt <- rbind(tt, modpos)
} else {
NA
}
})
modified_sequence <- peptides$sequence
for (i in 1:nrow(peptides)) {
if (!is.na(modified_peptides[[i]][1])) {
modified_sequence[i] <- stri_sub_replace_all(modified_sequence[i], replacement = paste0("[",modified_peptides[[i]][1,],"]"),
from=as.numeric(modified_peptides[[i]][3,])+1,
to=as.numeric(modified_peptides[[i]][3,]))
}
}
peptides$modified_sequence <- modified_sequence
stand_peps <- data.frame("modified_peptide"=peptides$modified_sequence, protein_group=peptides$samesets_accessions,
peptides[, grep("^number_of_psms", colnames(peptides))],
2^peptides[, grep("^abundance", colnames(peptides))],
peptides[, grep("^log_ratios", colnames(peptides))],
peptides[, grep("^differentially_regulated", colnames(peptides))])
# deleting charge states with lower intensities to maintain max. 1 (modified) peptide sequence
stand_peps <- stand_peps[order(rowMeans(peptides[, grep("^abundance", colnames(peptides))], na.rm = T), decreasing=T),]
stand_peps <- stand_peps[!duplicated(stand_peps$modified_peptide), ]
stand_peps <- stand_peps[order(stand_peps$protein_group), ]
write.csv(stand_peps, "stand_pep_quant_merged.csv")
colnames(proteins)
# Converting column names
colnames(proteins) <- sub("^peptides_count_", "number_of_peptides_", colnames(proteins))
colnames(proteins) <- sub("^log.ratios.", "log_ratios_", colnames(proteins))
for (s in unique(exp_design$exp_condition)) colnames(proteins) <- sub(paste0("^X",s,"\\."), paste0("abundance_",s,"_"), colnames(proteins))
colnames(proteins) <- sub("^FDR.PolySTest.X.", "differentially_regulated_", colnames(proteins))
proteins$samesets_accessions
head(proteins$samesets_accessions)
head(proteins$accession)
head(proteins$samesets_accessions, 100)
head(proteins$samesets_accessions, 200)
head(proteins$accession, 200)
head(proteins$samesets_accessions, 200)
write.csv(stand_prots, "stand_prot_quant_merged.csv")
library(matrixStats)
library(stringi)
#Reading files
peptides <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_pep_res.csv")
proteins <- read.csv("../../Results/20220225-dev-JU_DE/polystest/polystest_prot_res.csv")
exp_design <- read.csv("../../Results/20220225-dev-JU_DE/params/quant_exp_design.txt", sep="\t")
colnames(exp_design)[1:2] <- c("raw_file", "exp_condition")
write.csv(exp_design, "exp_design.csv")
# Converting column names
colnames(peptides) <- sub("^psm_count_", "number_of_psms_", colnames(peptides))
colnames(peptides) <- sub("^log.ratios.", "log_ratios_", colnames(peptides))
for (s in unique(exp_design$exp_condition)) colnames(peptides) <- sub(paste0("^X",s,"\\."), paste0("abundance_",s,"_"), colnames(peptides))
colnames(peptides) <- sub("^FDR.PolySTest.X.", "differentially_regulated_", colnames(peptides))
#Creating modified sequences
modified_peptides <- strsplit(peptides$modifications, "; ")
modified_peptides <- lapply(modified_peptides, function(x) {
if(any(!is.na(x))) {
tt <- matrix(unlist(strsplit(x, " \\(")), nrow=2)
tt[2,] <- sub("\\)","",tt[2,])
modpos <- NULL
for (i in 1:ncol(tt)) {
modpos <- append(modpos, ifelse(grepl("N-term|C-term", tt[2,i]), 0, sub("[A-Z]","",tt[2,i])))
}
tt <- rbind(tt, modpos)
} else {
NA
}
})
modified_sequence <- peptides$sequence
for (i in 1:nrow(peptides)) {
if (!is.na(modified_peptides[[i]][1])) {
modified_sequence[i] <- stri_sub_replace_all(modified_sequence[i], replacement = paste0("[",modified_peptides[[i]][1,],"]"),
from=as.numeric(modified_peptides[[i]][3,])+1,
to=as.numeric(modified_peptides[[i]][3,]))
}
}
peptides$modified_sequence <- modified_sequence
stand_peps <- data.frame("modified_peptide"=peptides$modified_sequence, protein_group=peptides$samesets_accessions,
peptides[, grep("^number_of_psms", colnames(peptides))],
2^peptides[, grep("^abundance", colnames(peptides))],
peptides[, grep("^log_ratios", colnames(peptides))],
peptides[, grep("^differentially_regulated", colnames(peptides))])
# deleting charge states with lower intensities to maintain max. 1 (modified) peptide sequence
stand_peps <- stand_peps[order(rowMeans(peptides[, grep("^abundance", colnames(peptides))], na.rm = T), decreasing=T),]
stand_peps <- stand_peps[!duplicated(stand_peps$modified_peptide), ]
stand_peps <- stand_peps[order(stand_peps$protein_group), ]
write.csv(stand_peps, "stand_pep_quant_merged.csv")
colnames(proteins)
# Converting column names
colnames(proteins) <- sub("^peptides_count_", "number_of_peptides_", colnames(proteins))
colnames(proteins) <- sub("^log.ratios.", "log_ratios_", colnames(proteins))
for (s in unique(exp_design$exp_condition)) colnames(proteins) <- sub(paste0("^X",s,"\\."), paste0("abundance_",s,"_"), colnames(proteins))
colnames(proteins) <- sub("^FDR.PolySTest.X.", "differentially_regulated_", colnames(proteins))
stand_prots <- data.frame(protein_group=proteins$samesets_accessions,
proteins[, grep("^number_of_peptides", colnames(proteins))],
proteins[, grep("^abundance_", colnames(proteins))],
proteins[, grep("^log_ratios", colnames(proteins))],
proteins[, grep("^differentially_regulated_", colnames(proteins))]
)
write.csv(stand_prots, "stand_prot_quant_merged.csv")
?write.csv
write.csv(exp_design, "exp_design.txt", sep="\t", rownames=F)
